#compdef keybase
#autoload

# keybase completion, based on cli help text
# https://github.com/rbirnie/oh-my-zsh-keybase

# The MIT License (MIT)
#
# Copyright (c) 2014 David Tiersch
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

local curcontext="$curcontext" state line ret=1
local -a _command_args
local -a _global_args
local -a _subcommands

local IFS=$'\n'
_global_args=($(keybase advanced | grep '^\s*--' | sed -r 's/^[\t ]*(--[^\t ,]+)( [^\t ,]*)?,? ?(--?[^\t ]+)?[\t ]*(.*)$/(\3)\1[\4]/'))

_arguments -C -A "-v" -A "--version"\
  '(- 1 *)'{-v,--version}'[display version information]' \
  '1: :->cmds' \
  $_global_args \
  '*:: :->args' && ret=0

case $state in
  cmds)
    _subcommands=(
      "btc:add a signed cryptocurrency address to your profile"
      "cert:print out the CA cert the client uses to authorize HTTPS connections"
      "dir:sign or verify a directory's contents"
      "config:make an initial configuration file"
      "decrypt:decrypt a file"
      "encrypt:encrypt a message and output to stdout or a file"
      "help:display help"
      "id:Identify a user, but do not accept or reject trust"
      "join:establish a new account on keybase.io"
      "keygen:generate a new PGP public key and optionally push it to the server"
      "list-signatures:list of your non-revoked signatures"
      "list-tracking:list people you are tracking"
      "login:establish a session"
      "logout:logout from the server"
      "pull:pull your public (& private, if possible) key(s) from the server"
      "push:push a PGP key from the client to the server"
      "prove:add a proof of identity"
      "reset:reset the local setup, deleting all local cached state"
      "revoke:revoke the currently active PGP keys"
      "revoke-signatures:revoke a proof or signature"
      "search:search all users"
      "sign:sign a message"
      "status:print current status"
      "switch:switch to a different user, and nuke the current state"
      "track:verify a user's authenticity and optionally track them"
      "untrack:untrack this user"
      "update:update the keybase client software"
      "verify:verify a file"
      "version:output version information about this client"
    )
    _describe -t subcommands 'Keybase subcommands' _subcommands && ret=0
    ;;
  args)
    case $line[1] in
      help)
        _values 'commands' \
          'btc' \
          'cert' \
          'dir' \
          'config' \
          'decrypt' \
          'encrypt' \
          'help' \
          'id' \
          'join' \
          'keygen' \
          'list-signatures' \
          'list-tracking' \
          'login' \
          'logout' \
          'pull' \
          'push' \
          'prove' \
          'reset' \
          'revoke' \
          'revoke-signatures' \
          'search' \
          'sign' \
          'status' \
          'switch' \
          'track' \
          'untrack' \
          'update' \
          'verify' \
          'version' && ret=0
        ;;
      btc)
        _values "btc command" \
          'btc[the address to sign and publicly post]'
        _command_args=(
          '(--force)--force[force overwrite, revoking any old addresses]'
        )
        ;;
      cert)
        _values "cert command" \
          'host[which host to authorize]'
        _command_args=(
          '(--all)--all[list all possible certs in JSON form]' \
        )
        ;;
      config)
        _command_args=(
          '(--get)--get[Read the given configuration option]:GET' \
          '(--json)--json[interpret the value as JSON]' \
          '(--pretty)--pretty[pretty-print JSON]' \
          '(--server)--server[specify which server to use]:SERVER' \
          '(--reset-server)--reset-server[reset the server to default]' \
        )
        ;;
      decrypt)
        _command_args=(
          '(--base64)--base64[output result as base64-encoded data]' \
          '(--track-remote)--track-remote[remotely track by default]' \
          '(--track-local)--track-local[do not prompt for remote tracking]' \
          '(--assert)--assert=-[provide an identity assertion]:ASSERT' \
          '(--batch)--batch[batch-mode without interactivity]' \
          '(--prompt-remote)--prompt-remote[prompt for remote tracking]' \
          '(--track)--track[prompt for tracking if necessary]' \
          '(--no-id)--no-id[do not try to ID the user]' \
          '(--signed)--signed[assert signed]' \
          '(--signed-by)--signed-by=-[assert signed by the given user]:SIGNED_BY' \
          '(--message)--message=-[provide the message on the command line]:MESSAGE' \
          '(--output)--output=-[output to the given file]:OUTPUT'\
        )
        _files
        ;;
      dir)
        _values "dir command" \
          "sign[sign a directory's contents]" \
          "verify[verify a directory's contents]"
        ;;
      encrypt)
        _command_args=(
          '(--track-remote)--track-remote[remotely track by default]' \
          '(--track-local)--track-local[do not prompt for remote tracking]' \
          '(--assert)--assert=-[provide an identity assertion]:ASSERT' \
          '(--batch)--batch[batch-mode without interactivity]' \
          '(--prompt-remote)--prompt-remote[prompt for remote tracking]' \
          '(--sign)--sign[sign in addition to encrypting]' \
          '(--message)--message=-[provide the message on the command line]:MESSAGE' \
          '(--binary)--binary[output in binary (rather than ASCII/armored)]' \
          '(--output)--output=-[the output file to write the encryption to]' \
        )
        _values "encrypt command" \
          'them[the username of the receiver]'
        _files
        ;;
      id)
        _values "id command" \
          'them[the username to id]'
        _command_args=(
          '(--assert)--assert=-[provide a key assertion]:ASSERT' \
        )
        ;;
      keygen)
        _command_args=(
          '(--push)--push[true if we should push]' \
          '(--secret)--secret[push the secret key to the server]' \
          '(--update)--update[update the public key with new key fields]' \
        )
        ;;
      list-signatures)
        _command_args=(
          '(--revoked)--revoked[show revoked signatures too]' \
          '(--verbose)--verbose[a full dump, with more gory details]' \
          '(--json)--json[output in json format; default is simple text list]' \
          '(--type)--type=-[the type of signatures to output; choose from "track","proof","currency","self"; all by default]:TYPE' \
        )
        ;;
      list-tracking)
        _command_args=(
          '(--verbose)--verbose[a full dump, with more gory details]' \
          '(--json)--json[output in json format; default is simple text list]' \
        )
        _values "list-tracking" \
          'filter[a regex to filter by]'
        ;;
      login)
        _command_args=(
          '(--no-key-pull)--no-key-pull[do not pull secret key from server]' \
        )
        ;;
      pull)
        _command_args=(
          '(--force)--force[force repull from server even if it is already stored locally]' \
        )
        ;;
      push)
        _command_args=(
          '(--gen)--gen[generate a new key]' \
          '(--show-public-only-keys)--show-public-only-keys[Allow picking of public keys for which no secret key is available (not recommended)]' \
          '(--skip-add-email)--skip-add-email[Skip the prompt asking if we want to store email to key; do not do it]' \
          '(--add-email)--add-email[Add email to key by default, if needed]' \
          '(--secret)--secret[push the secret key to the server]' \
          '(--update)--update[update the public key with new key fields]' \
        )
        _values "push command" \
          'search[search parameter to find the right key]'
        ;;
      prove)
        _command_args=(
          '(--help)--help[Show this help message and exit.]' \
          '(--force)--force[do not stop for any prompts]' \
          '(--output)--output[output proof text to file (rather than standard out)]:OUTPUT' \
        )
        _values "push command" \
          'service[the name of service; can be one of: {twitter,github,web,dns,reddit,coinbase,hackernews}]' \
          'remote_name[username or hostname at that service]'
        ;;
      reset|revoke|switch)
        _command_args=(
          '(--force)--force[do not prompt for approval; force it]' \
        )
        ;;
      revoke-signatures)
        _command_args=(
          '(--seqno)--seqno[specify signature as a sequence number]' \
        )
        ;;
      search)
        _command_args=(
          '(--verbose)--verbose[a full dump, with more gory details]' \
          '(--json)--json[output in json format; default is simple text list]' \
        )
        ;;
      sign)
        _command_args=(
          '(--message)--message=-[provide the message on the command line]:MESSAGE' \
          '(--binary)--binary[output in binary (rather than ASCII/armored)]' \
          '(--clearsign)--clearsign[make a clear signature]' \
          '(--detach-sign)--detach-sign[make a detached signature]' \
          '(--output)--output=-[specify an output file]:OUTPUT:_files' \
        )
        _files
        ;;
      status)
        _command_args=(
          '(--text)--text[output in text format; default is JSON]' \
        )
        ;;
      track)
        _command_args=(
          '(--track-remote)--track-remote[remotely track by default]' \
          '(--track-local)--track-local[do not prompt for remote tracking]' \
          '(--assert)--assert=-[provide an identity assertion]:ASSERT' \
          '(--batch)--batch[batch-mode without interactivity]' \
          '(--prompt-remote)--prompt-remote[prompt for remote tracking]' \
        )
        _values "untrack command" \
          'them[the username of the user to track]'
        ;;
      untrack)
        _command_args=(
          '(--remove-key)--remove-key[remove key from GPG keyring]' \
          '(--batch)--batch[run in batch mode / do not prompt]' \
          '(--keep-key)--keep-key[preserve key in GPG keyring]' \
        )
        _values "untrack command" \
          'them[the username of the user to untrack]'
        ;;
      update)
        _command_args=(
          '(--npm)--npm=-[an alternate path for NPM]:NPM' \
          '(--url)--url=-[specify a URL prefix for fetching]:URL' \
          '(--skip-cleanup)--skip-cleanup[Do not cleanup temporary stuff after install]' \
          '(--cmd)--cmd=-[the command to run]:CMD' \
          '(--prefix)--prefix=-[the prefix to install to]:PREFIX' \
          '(--global)--global[install globally; do not try to guess prefix]' \
        )
        ;;
      verify)
        _command_args=(
          '(--base64)--base64[output result as base64-encoded data]' \
          '(--track-remote)--track-remote[remotely track by default]' \
          '(--track-local)--track-local[do not prompt for remote tracking]' \
          '(--assert)--assert=-[provide an identity assertion]:ASSERT' \
          '(--batch)--batch[batch-mode without interactivity]' \
          '(--prompt-remote)--prompt-remote[prompt for remote tracking]' \
          '(--track)--track[prompt for tracking if necessary]' \
          '(--no-id)--no-id[do not try to ID the user]' \
          '(--signed)--signed[assert signed]' \
          '(--signed-by)--signed-by=-[assert signed by the given user]:SIGNED_BY' \
          '(--message)--message=-[provide the message on the command line]:MESSAGE' \
        )
        _files
        ;;
    esac
    ;;
esac

_arguments \
  $_command_args \
  && ret=0

return ret
