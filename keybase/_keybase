#compdef keybase
#autoload

# keybase completion, based on cli help text
# https://github.com/rbirnie/oh-my-zsh-keybase

local curcontext="$curcontext" state line ret=1
local -a _command_args

_arguments -C -A "-v" -A "--version" \
  '(- 1 *)'{-v,--version}'[display version information]' \
  '1: :->cmds' \
  '*:: :->args' && ret=0

case $state in
  cmds)
    _values "keybase command" \
    "btc[add a signed cryptocurrency address to your profile]" \
    "cert[print out the CA cert the client uses to authorize HTTPS connections]" \
    "ctl[Control the background keybase service]" \
    "config[make an initial configuration file]" \
    "decrypt[decrypt a file]" \
    "deprovision[Revoke the current device, log out, and delete local state]" \
    "device[Manage your devices]" \
    "encrypt[encrypt a message and output to stdout or a file]" \
    "help[display help]" \
    "id[Identify a user, but do not accept or reject trust]" \
    "list-tracking[list people you are tracking]" \
    "list-trackers[list trackers]" \
    "login[establish a session]" \
    "logout[logout from the server]" \
    "paperkey[Generate paper keys for recovering your account]" \
    "pgp[Manage keybase PGP keys]" \
    "ping[Ping the keybase API server]" \
    "prove[add a proof of identity]" \
    "search[Search for keybase users]" \
    "sigs[Manage signatures]" \
    "signup[Signup for a new account]" \
    "status[print current status]" \
    "track[verify a user's authenticity and optionally track them]" \
    "unlock[Unlock local key storage]" \
    "untrack[untrack this user]" \
    "verify[verify a file]" \
    "version[output version information about this client]"
    ret=0
    ;;
  args)
    case $line[1] in
      help)
        _values 'commands' \
          'btc' \
          'cert' \
          'ctl' \
          'config' \
          'decrypt' \
          'deprovision' \
          'device' \
          'encrypt' \
          'help' \
          'id' \
          'list-tracking' \
          'list-trackers' \
          'login' \
          'logout' \
          'paperkey' \
          'pgp' \
          'ping' \
          'prove' \
          'search' \
          'sigs' \
          'signup' \
          'status' \
          'track' \
          'unlock' \
          'untrack' \
          'verify' \
          'version' && ret=0
        ;;
      btc)
        _values "btc command" \
          'btc[the address to sign and publicly post]'
        _command_args=(
          '(--force)--force[force overwrite, revoking any old addresses]'
        )
        ;;
      cert)
        _values "cert command" \
          'host[which host to authorize]'
        _command_args=(
          '(--all)--all[list all possible certs in JSON form]' \
        )
        ;;
      config)
        _command_args=(
          '(--get)--get[Read the given configuration option]:GET' \
          '(--json)--json[interpret the value as JSON]' \
          '(--pretty)--pretty[pretty-print JSON]' \
          '(--server)--server[specify which server to use]:SERVER' \
          '(--reset-server)--reset-server[reset the server to default]' \
        )
        ;;
      id)
        _values "id command" \
          'them[the username to id]'
        _command_args=(
          '(--assert)--assert=-[provide a key assertion]:ASSERT' \
        )
        ;;
      list-tracking)
        _command_args=(
          '(--verbose)--verbose[a full dump, with more gory details]' \
          '(--json)--json[output in json format; default is simple text list]' \
        )
        _values "list-tracking" \
          'filter[a regex to filter by]'
        ;;
      list-trackers)
        _command_args=(
			    '(--uid)--uid[Load user by UID]' \
			    '(--verbose)--verbose[A full dump, with more gory details]' \
			    '(--json)--json[output as JSON (default is text)]' \
			    '(--headers)--headers[show column headers]' \
			  )
        _values "list-trackers" \
			    'filter[a regex to filter by]'
		    ;;
      login)
        _command_args=(
          '(--no-key-pull)--no-key-pull[do not pull secret key from server]' \
        )
        ;;
      pgp)
        _values "command" \
          'gen[Generate a new PGP key and write to local secret keychain]' \
          'pull[Download the latest PGP keys for people you track]' \
          'update[Update your public PGP keys on keybase with those exported from the local GPG keyring]' \
          'select[Select a key as your own and register the public half with the server]' \
          'sign[PGP sign a document]' \
          'encrypt[PGP encrypt messages or files for keybase users]' \
          'decrypt[PGP decrypt messages or files for keybase users]' \
          'verify[PGP verify message or file signatures for keybase users]' \
          'export[Export a PGP key from keybase]' \
          'import[Import a PGP key into keybase]' \
          'drop[Drop Keybases use of a PGP key]' \
        ;;
      prove)
        _command_args=(
          '(--help)--help[Show this help message and exit.]' \
          '(--force)--force[do not stop for any prompts]' \
          '(--output)--output[output proof text to file (rather than standard out)]:OUTPUT' \
        )
        _values "push command" \
          'service[the name of service; can be one of: {twitter,github,web,dns,reddit,coinbase,hackernews}]' \
          'remote_name[username or hostname at that service]'
        ;;
      search)
        _command_args=(
          '(--json)--json[output in json format; default is simple text list]' \
        )
        ;;
      sigs)
        _values "command" \
          'list[list signatures]' \
          'revoke' \
        ;;
      signup)
        _command_args=(
        '(--invite-code)--invite-code[Specify an invite code]' \
        '(--email)--email[specify an account email]' \
        '(--username)--username[specify a username]' \
        )
        ;;
      status)
        _command_args=(
          '(--text)--text[output in text format; default is JSON]' \
        )
        ;;
      track)
        _command_args=(
          '(--track-remote)--track-remote[remotely track by default]' \
          '(--track-local)--track-local[do not prompt for remote tracking]' \
          '(--assert)--assert=-[provide an identity assertion]:ASSERT' \
          '(--batch)--batch[batch-mode without interactivity]' \
          '(--prompt-remote)--prompt-remote[prompt for remote tracking]' \
        )
        _values "untrack command" \
          'them[the username of the user to track]'
        ;;
      untrack)
        _command_args=(
          '(--remove-key)--remove-key[remove key from GPG keyring]' \
          '(--batch)--batch[run in batch mode / do not prompt]' \
          '(--keep-key)--keep-key[preserve key in GPG keyring]' \
        )
        _values "untrack command" \
          'them[the username of the user to untrack]'
        ;;
    esac
    ;;
esac

_arguments \
  $_command_args \
  '(-h)'--help'[Show help message and exit.]' \
  &&  return 0

return ret
